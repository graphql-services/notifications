// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type NotificationFilterType struct {
	And               []*NotificationFilterType `json:"AND"`
	Or                []*NotificationFilterType `json:"OR"`
	ID                *string                   `json:"id"`
	IDNe              *string                   `json:"id_ne"`
	IDGt              *string                   `json:"id_gt"`
	IDLt              *string                   `json:"id_lt"`
	IDGte             *string                   `json:"id_gte"`
	IDLte             *string                   `json:"id_lte"`
	IDIn              []string                  `json:"id_in"`
	Message           *string                   `json:"message"`
	MessageNe         *string                   `json:"message_ne"`
	MessageGt         *string                   `json:"message_gt"`
	MessageLt         *string                   `json:"message_lt"`
	MessageGte        *string                   `json:"message_gte"`
	MessageLte        *string                   `json:"message_lte"`
	MessageIn         []string                  `json:"message_in"`
	MessageLike       *string                   `json:"message_like"`
	MessagePrefix     *string                   `json:"message_prefix"`
	MessageSuffix     *string                   `json:"message_suffix"`
	Seen              *bool                     `json:"seen"`
	SeenNe            *bool                     `json:"seen_ne"`
	SeenGt            *bool                     `json:"seen_gt"`
	SeenLt            *bool                     `json:"seen_lt"`
	SeenGte           *bool                     `json:"seen_gte"`
	SeenLte           *bool                     `json:"seen_lte"`
	SeenIn            []bool                    `json:"seen_in"`
	Channel           *string                   `json:"channel"`
	ChannelNe         *string                   `json:"channel_ne"`
	ChannelGt         *string                   `json:"channel_gt"`
	ChannelLt         *string                   `json:"channel_lt"`
	ChannelGte        *string                   `json:"channel_gte"`
	ChannelLte        *string                   `json:"channel_lte"`
	ChannelIn         []string                  `json:"channel_in"`
	ChannelLike       *string                   `json:"channel_like"`
	ChannelPrefix     *string                   `json:"channel_prefix"`
	ChannelSuffix     *string                   `json:"channel_suffix"`
	Principal         *string                   `json:"principal"`
	PrincipalNe       *string                   `json:"principal_ne"`
	PrincipalGt       *string                   `json:"principal_gt"`
	PrincipalLt       *string                   `json:"principal_lt"`
	PrincipalGte      *string                   `json:"principal_gte"`
	PrincipalLte      *string                   `json:"principal_lte"`
	PrincipalIn       []string                  `json:"principal_in"`
	PrincipalLike     *string                   `json:"principal_like"`
	PrincipalPrefix   *string                   `json:"principal_prefix"`
	PrincipalSuffix   *string                   `json:"principal_suffix"`
	Reference         *string                   `json:"reference"`
	ReferenceNe       *string                   `json:"reference_ne"`
	ReferenceGt       *string                   `json:"reference_gt"`
	ReferenceLt       *string                   `json:"reference_lt"`
	ReferenceGte      *string                   `json:"reference_gte"`
	ReferenceLte      *string                   `json:"reference_lte"`
	ReferenceIn       []string                  `json:"reference_in"`
	ReferenceLike     *string                   `json:"reference_like"`
	ReferencePrefix   *string                   `json:"reference_prefix"`
	ReferenceSuffix   *string                   `json:"reference_suffix"`
	ReferenceID       *string                   `json:"referenceID"`
	ReferenceIDNe     *string                   `json:"referenceID_ne"`
	ReferenceIDGt     *string                   `json:"referenceID_gt"`
	ReferenceIDLt     *string                   `json:"referenceID_lt"`
	ReferenceIDGte    *string                   `json:"referenceID_gte"`
	ReferenceIDLte    *string                   `json:"referenceID_lte"`
	ReferenceIDIn     []string                  `json:"referenceID_in"`
	ReferenceIDLike   *string                   `json:"referenceID_like"`
	ReferenceIDPrefix *string                   `json:"referenceID_prefix"`
	ReferenceIDSuffix *string                   `json:"referenceID_suffix"`
	Date              *time.Time                `json:"date"`
	DateNe            *time.Time                `json:"date_ne"`
	DateGt            *time.Time                `json:"date_gt"`
	DateLt            *time.Time                `json:"date_lt"`
	DateGte           *time.Time                `json:"date_gte"`
	DateLte           *time.Time                `json:"date_lte"`
	DateIn            []*time.Time              `json:"date_in"`
	UpdatedAt         *time.Time                `json:"updatedAt"`
	UpdatedAtNe       *time.Time                `json:"updatedAt_ne"`
	UpdatedAtGt       *time.Time                `json:"updatedAt_gt"`
	UpdatedAtLt       *time.Time                `json:"updatedAt_lt"`
	UpdatedAtGte      *time.Time                `json:"updatedAt_gte"`
	UpdatedAtLte      *time.Time                `json:"updatedAt_lte"`
	UpdatedAtIn       []*time.Time              `json:"updatedAt_in"`
	CreatedAt         *time.Time                `json:"createdAt"`
	CreatedAtNe       *time.Time                `json:"createdAt_ne"`
	CreatedAtGt       *time.Time                `json:"createdAt_gt"`
	CreatedAtLt       *time.Time                `json:"createdAt_lt"`
	CreatedAtGte      *time.Time                `json:"createdAt_gte"`
	CreatedAtLte      *time.Time                `json:"createdAt_lte"`
	CreatedAtIn       []*time.Time              `json:"createdAt_in"`
	UpdatedBy         *string                   `json:"updatedBy"`
	UpdatedByNe       *string                   `json:"updatedBy_ne"`
	UpdatedByGt       *string                   `json:"updatedBy_gt"`
	UpdatedByLt       *string                   `json:"updatedBy_lt"`
	UpdatedByGte      *string                   `json:"updatedBy_gte"`
	UpdatedByLte      *string                   `json:"updatedBy_lte"`
	UpdatedByIn       []string                  `json:"updatedBy_in"`
	CreatedBy         *string                   `json:"createdBy"`
	CreatedByNe       *string                   `json:"createdBy_ne"`
	CreatedByGt       *string                   `json:"createdBy_gt"`
	CreatedByLt       *string                   `json:"createdBy_lt"`
	CreatedByGte      *string                   `json:"createdBy_gte"`
	CreatedByLte      *string                   `json:"createdBy_lte"`
	CreatedByIn       []string                  `json:"createdBy_in"`
}

type _Service struct {
	Sdl *string `json:"sdl"`
}

type NotificationSortType string

const (
	NotificationSortTypeIDAsc           NotificationSortType = "ID_ASC"
	NotificationSortTypeIDDesc          NotificationSortType = "ID_DESC"
	NotificationSortTypeMessageAsc      NotificationSortType = "MESSAGE_ASC"
	NotificationSortTypeMessageDesc     NotificationSortType = "MESSAGE_DESC"
	NotificationSortTypeSeenAsc         NotificationSortType = "SEEN_ASC"
	NotificationSortTypeSeenDesc        NotificationSortType = "SEEN_DESC"
	NotificationSortTypeChannelAsc      NotificationSortType = "CHANNEL_ASC"
	NotificationSortTypeChannelDesc     NotificationSortType = "CHANNEL_DESC"
	NotificationSortTypePrincipalAsc    NotificationSortType = "PRINCIPAL_ASC"
	NotificationSortTypePrincipalDesc   NotificationSortType = "PRINCIPAL_DESC"
	NotificationSortTypeReferenceAsc    NotificationSortType = "REFERENCE_ASC"
	NotificationSortTypeReferenceDesc   NotificationSortType = "REFERENCE_DESC"
	NotificationSortTypeReferenceIDAsc  NotificationSortType = "REFERENCE_ID_ASC"
	NotificationSortTypeReferenceIDDesc NotificationSortType = "REFERENCE_ID_DESC"
	NotificationSortTypeDateAsc         NotificationSortType = "DATE_ASC"
	NotificationSortTypeDateDesc        NotificationSortType = "DATE_DESC"
	NotificationSortTypeUpdatedAtAsc    NotificationSortType = "UPDATED_AT_ASC"
	NotificationSortTypeUpdatedAtDesc   NotificationSortType = "UPDATED_AT_DESC"
	NotificationSortTypeCreatedAtAsc    NotificationSortType = "CREATED_AT_ASC"
	NotificationSortTypeCreatedAtDesc   NotificationSortType = "CREATED_AT_DESC"
	NotificationSortTypeUpdatedByAsc    NotificationSortType = "UPDATED_BY_ASC"
	NotificationSortTypeUpdatedByDesc   NotificationSortType = "UPDATED_BY_DESC"
	NotificationSortTypeCreatedByAsc    NotificationSortType = "CREATED_BY_ASC"
	NotificationSortTypeCreatedByDesc   NotificationSortType = "CREATED_BY_DESC"
)

var AllNotificationSortType = []NotificationSortType{
	NotificationSortTypeIDAsc,
	NotificationSortTypeIDDesc,
	NotificationSortTypeMessageAsc,
	NotificationSortTypeMessageDesc,
	NotificationSortTypeSeenAsc,
	NotificationSortTypeSeenDesc,
	NotificationSortTypeChannelAsc,
	NotificationSortTypeChannelDesc,
	NotificationSortTypePrincipalAsc,
	NotificationSortTypePrincipalDesc,
	NotificationSortTypeReferenceAsc,
	NotificationSortTypeReferenceDesc,
	NotificationSortTypeReferenceIDAsc,
	NotificationSortTypeReferenceIDDesc,
	NotificationSortTypeDateAsc,
	NotificationSortTypeDateDesc,
	NotificationSortTypeUpdatedAtAsc,
	NotificationSortTypeUpdatedAtDesc,
	NotificationSortTypeCreatedAtAsc,
	NotificationSortTypeCreatedAtDesc,
	NotificationSortTypeUpdatedByAsc,
	NotificationSortTypeUpdatedByDesc,
	NotificationSortTypeCreatedByAsc,
	NotificationSortTypeCreatedByDesc,
}

func (e NotificationSortType) IsValid() bool {
	switch e {
	case NotificationSortTypeIDAsc, NotificationSortTypeIDDesc, NotificationSortTypeMessageAsc, NotificationSortTypeMessageDesc, NotificationSortTypeSeenAsc, NotificationSortTypeSeenDesc, NotificationSortTypeChannelAsc, NotificationSortTypeChannelDesc, NotificationSortTypePrincipalAsc, NotificationSortTypePrincipalDesc, NotificationSortTypeReferenceAsc, NotificationSortTypeReferenceDesc, NotificationSortTypeReferenceIDAsc, NotificationSortTypeReferenceIDDesc, NotificationSortTypeDateAsc, NotificationSortTypeDateDesc, NotificationSortTypeUpdatedAtAsc, NotificationSortTypeUpdatedAtDesc, NotificationSortTypeCreatedAtAsc, NotificationSortTypeCreatedAtDesc, NotificationSortTypeUpdatedByAsc, NotificationSortTypeUpdatedByDesc, NotificationSortTypeCreatedByAsc, NotificationSortTypeCreatedByDesc:
		return true
	}
	return false
}

func (e NotificationSortType) String() string {
	return string(e)
}

func (e *NotificationSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationSortType", str)
	}
	return nil
}

func (e NotificationSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
